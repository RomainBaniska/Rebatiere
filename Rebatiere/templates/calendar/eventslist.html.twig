


{% block body %}
    {# Calendar #}
    <div id='calendar'></div>

   

  {# Informations #}
    <div id='infos'>
      Sélectionnez un événement pour laisser apparaitre le détail
    </div>
     <div id='event-details'></div> 

{% endblock %}


{% block javascripts %} 

    {# Moment.js Script #}
    <script src="{{ asset('assets/javascript/moment.min.js') }}"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/locale/fr.min.js"></script>
    <script> moment.locale('fr-FR');</script>

    {# FullCalendar Script 1 #}
    <script src='https://cdn.jsdelivr.net/npm/fullcalendar@6.1.11/index.global.min.js'></script>
    
    {# FullCalendar Script (2) : Paramétrage du FullCalendar #}
    <script>
    
      document.addEventListener('DOMContentLoaded', function() {
        let calendarEl = document.getElementById('calendar');
        let eventDetailsEl = document.getElementById('infos'); 

        {# Fetch des dates pour la piscine #}

        // Fetch des dates pour la piscine
        fetch('/api/piscine-dates')
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok ' + response.statusText);
                }
                return response.json();
            })
            .then(openDates => {

        let calendar = new FullCalendar.Calendar(calendarEl, {          
          initialView: 'dayGridWeek',
          views: {
                  dayGridWeek : { dayHeaderContent: function(arg) {
                    let date = arg.date;
                    let dayName = arg.text;
                    let dayNumber = date.getDate();
                    return dayName + ' ' + dayNumber;
                }
                  },
                  dayGridMonth: {
                        dayHeaderContent: function(arg) {
                            return arg.text;
                }
                  }
          },
          weekends: true,
          dayHeaderFormat: { weekday: 'long' },
          locale: 'fr',
          firstDay: '1',
          height : '80%',
          aspectRatio: 1,
          displayEventTime: false,

        {# Informations lorsque je clique sur une date #}
          dateClick: function(info) {
                // Vide la div
                eventDetailsEl.innerHTML = '';
                // Filtre les événements de la date cliquée
                let events = calendar.getEvents().filter(function(event) {
                  return event.startStr === info.dateStr;
                });
                // Affiche les détails de l'événement
                if (events.length > 0) {
                  events.forEach(function(event) {
                    let icon = event.extendedProps.icon;
                    let firstname = event.extendedProps.firstname
                    let lastname = event.extendedProps.lastname
                    let chamber = event.extendedProps.chamber;
                    let dates = event.startStr + ' - ' + event.endStr;
                    let debut = moment(event.extendedProps.debut, 'DD-MM-YYYY').format('dddd D MMMM');
                    let fin = moment(event.extendedProps.fin, 'DD-MM-YYYY').format('dddd D MMMM');
                    let eventInfo = `
                      <div>
                        <img src="${icon}" style="width: 30px; height: 30px; border-radius: 50%; margin: 5px;">
                        ${firstname} ${lastname}
                        <strong>Chambre:</strong> ${chamber}
                        <strong>Période de réservation:</strong> du ${debut} au ${fin}
                      </div>
                    `;
                    eventDetailsEl.innerHTML += eventInfo;
                  });
                } else {
                  eventDetailsEl.innerHTML = '<p>Aucun événement pour cette date.</p>';
                }
                },
          eventDisplay : 'block',
          headerToolbar: {
            left: 'myCustomButton',
            center: 'title' ,
            right: 'prev,dayGridWeek,dayGridMonth,next'
          },
          events: '/api/reservations',
 
        // Contenu de la cellule 'jour' //
          dayCellContent: function(arg) {
                        let dateText = arg.date.getDate();
                        let dateCopy = new Date(arg.date);
                        dateCopy.setDate(dateCopy.getDate() + 1);
                        let formattedDate = dateCopy.toISOString().split('T')[0];
                        let color = openDates.includes(formattedDate) ? 'green' : 'red';

                        let id = `pastille-${arg.date.getFullYear()}-${arg.date.getMonth() + 1}-${dateText}`;
                        
                        let pastille = `<div id="${id}" class="circle ${color}-circle"></div>`;
                        let dateHtml = `<div class="fc-numerojour">${dateText}</div>`;

                        if (calendar.view.type === 'dayGridMonth') {
                            return { html: pastille + dateHtml };
                        } else if (calendar.view.type === 'dayGridWeek') {
                            return { html: pastille };
                        }
                    },

          // Ajout de boutons //
          customButtons: {
            myCustomButton: {
              text: 'Nouvelle réservation',
              click: function() {
                window.location.href = "{{ path('app_reservation') }}";
              }
            }
          },

          {# Traduction des boutons #}
          buttonText: {
            today: 'aujourd\'hui',
            month: 'mois',
            week: 'semaine',
            day: 'jour',
            list: 'liste'
            },

        {# Contenu des événements #}
        eventContent: function(arg) {
            let containerEl = document.createElement('div')

            let avatarEl = document.createElement('img')
            avatarEl.src = arg.event.extendedProps.icon
            avatarEl.style.width = '30px'
            avatarEl.style.height = '30px'
            avatarEl.style.borderRadius = '50%'
            avatarEl.style.margin = '5px'

            let textEl = document.createElement('span')
            textEl.innerHTML = arg.event.title

            containerEl.appendChild(avatarEl)

            return { domNodes: [avatarEl] }
        },
        });
        calendar.render();
      });

      {# Fermeture du fetch #}
      });

    </script>
    {% endblock %}

    {% block stylesheets %}
    <link rel="stylesheet" href="{{ asset('assets/css/calendar.css') }}">
    <link rel="stylesheet" href="{{ asset('assets/css/homestyle.css') }}">
    {# font Poppins #}
    <link href='https://fonts.googleapis.com/css?family=Poppins' rel='stylesheet'> 
    {% endblock %}

  

