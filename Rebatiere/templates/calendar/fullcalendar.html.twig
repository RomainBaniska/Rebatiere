
{% block stylesheets %}
    {# Calendar & homestyle #}
    <link rel="stylesheet" href="{{ asset('assets/css/calendar.css') }}">
    <link rel="stylesheet" href="{{ asset('assets/css/homestyle.css') }}">
    {# font Poppins #}
    <link href='https://fonts.googleapis.com/css?family=Poppins' rel='stylesheet'> 
    {# Modal #}
    <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/animate.css/3.2.0/animate.min.css">
    <link rel="stylesheet" href="{{ asset('assets/css/modal.css') }}">
{% endblock %}

{% block body %}
<body>
<div class="bodyContainer">
<div class="bodyOverlay">
    {# Calendar #}

    <div class="calendarContainer">
      <div id='calendar'></div>
    </div>

  {# Modal #}

    <!-- Lien pour ouvrir la modal -->
    <a id="openModalButton" href="#animatedModal" style="display:none;">Ouvrir la modal</a>

    <div id="animatedModal">
        <div class="close-animatedModal"> 
            Fermer
        </div>
        <div class="modal-content">
          <div id='eventDetailsModalContent'>
          {# Informations de la date cliquée injectées ici #}
          </div>
        </div>
    </div>
</div>
</div>
</body>
{% endblock %}


{% block javascripts %} 

    {# Moment.js Script #}
    <script src="{{ asset('assets/javascript/moment.min.js') }}"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/locale/fr.min.js"></script>
    <script> moment.locale('fr-FR');</script>

    {# FullCalendar Script 1 #}
    <script src='https://cdn.jsdelivr.net/npm/fullcalendar@6.1.11/index.global.min.js'></script>
    
    {# FullCalendar Script (2) : Paramétrage du FullCalendar #}
    <script>
    
      document.addEventListener('DOMContentLoaded', function() {
        let calendarEl = document.getElementById('calendar');
        let eventDetailsModalContent = document.getElementById('eventDetailsModalContent');
        let openModalButton = document.getElementById('openModalButton');
        const userRole = "{{ app.user.roles[0] }}";
        /*const headerToolbarConfig = userRole === 'ROLE_ADMIN' 
              ? { left: 'myCustomButton1 myCustomButton2', center: 'title', right: 'prev,dayGridWeek,dayGridMonth,next' }
              : { left: 'myCustomButton1', center: 'title', right: 'prev,dayGridWeek,dayGridMonth,next' };
        */

        const headerToolbarConfig = {
                left: 'myCustomButton1 myCustomButton2',
                center: 'title',
                right: 'prev,dayGridWeek,dayGridMonth,next'
            };

        /* let headerToolbarConfig;
        if (userRole === 'ROLE_ADMIN') {
            headerToolbarConfig = {
                left: 'myCustomButton1 myCustomButton2',
                center: 'title',
                right: 'prev,dayGridWeek,dayGridMonth,next'
            };
        } else {
            headerToolbarConfig = {
                left: 'myCustomButton1',
                center: 'title',
                right: 'prev,dayGridWeek,dayGridMonth,next'
            };
        }
        */


        // Fetch des dates pour la piscine
        fetch('/api/piscine-dates')
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok ' + response.statusText);
                }
                return response.json();
            })
            .then(openDates => {

        let calendar = new FullCalendar.Calendar(calendarEl, {          
          initialView: 'dayGridWeek',
          showNonCurrentDates: false,
          views: {
                  dayGridWeek : { dayHeaderContent: function(arg) {
                    let date = arg.date;
                    let dayName = arg.text;
                    let dayNumber = date.getDate();
                    //return dayName + ' ' + dayNumber; //Décommenter si vous voulez le numero du jour dans la cellule
                    return dayName ;
                }
                  },
                  dayGridMonth: {
                        dayHeaderContent: function(arg) {
                            return arg.text;
                }
                  }
          },
          weekends: true,
          dayHeaderFormat: { weekday: 'long' },
          locale: 'fr',
          firstDay: '1',
          height : '80%',
          aspectRatio: 1,
          displayEventTime: false,
          datesSet: function(info) {
          // Obtenir le début et la fin de la période visible
          let start = new Date(info.start);
          let end = new Date(info.end);

          // Obtenir la classe de saison pour la première date de la période visible
          let firstDateClass = getSeasonClass(start, calendar.view.type);

          if (calendar.view.type === 'dayGridWeek') {
              // Appliquer l'image de fond à chaque ligne de semaine (Décommenter)
               let weekRows = calendarEl.querySelectorAll('.fc-dayGridWeek-view');
              weekRows.forEach(weekRow => {
                  weekRow.classList.remove('spring-background', 'summer-background', 'autumn-background', 'winter-background');
                  weekRow.classList.add(firstDateClass + '-background');
              });
          } else if (calendar.view.type === 'dayGridMonth') {
              // Appliquer l'image de fond à l'ensemble du mois
              let monthGrid = calendarEl.querySelector('.fc-dayGridMonth-view');
              monthGrid.classList.remove('spring-background', 'summer-background', 'autumn-background', 'winter-background');
              monthGrid.classList.add(firstDateClass + '-background');
          }
           // Retirer les classes CSS des boutons personnalisés
          document.querySelector('.fc-myCustomButton1-button').classList.remove('fc-button-primary');
          document.querySelector('.fc-myCustomButton2-button').classList.remove('fc-button-primary');
      },
           //Informations lorsque je clique sur une date
          dateClick: function(info) {
                // Vide la div
                // eventDetailsEl.innerHTML = '';
                eventDetailsModalContent.innerHTML = '';
                // Filtre les événements de la date cliquée -> Récupération des events, filtrage : Tous ceux dont la date de début 'startStr' = à la date cliquée 'dateStr'
                let events = calendar.getEvents().filter(function(event) {
                  return event.startStr === info.dateStr;
                });
                // Affiche les détails de l'événement. Si 1 ou plusieurs events existent, chaque événement est parcouru et les détails extraits
                if (events.length > 0) {
                  events.forEach(function(event) {
                    let icon = event.extendedProps.icon;
                    let firstname = event.extendedProps.firstname
                    let lastname = event.extendedProps.lastname
                    let chamber = event.extendedProps.chamber;
                    let dates = event.startStr + ' - ' + event.endStr;
                    // Formatage avec le script moment.js ("Lundi 1 Janvier")
                    let debut = moment(event.extendedProps.debut, 'DD-MM-YYYY').format('dddd D MMMM');
                    let fin = moment(event.extendedProps.fin, 'DD-MM-YYYY').format('dddd D MMMM');
                    let eventInfo = `
                      <div>
                        <div class="modalReservationCell">
                        <img src="${icon}" style="width: 30px; height: 30px; border-radius: 50%; margin: 5px; border: 1px solid black">
                        <br>
                        ${firstname} ${lastname}
                        <br> <br>
                        <strong>Chambre:</strong> ${chamber}
                        <br>
                        <strong>Période de réservation:</strong> du ${debut} au ${fin}
                        <div>
                      </div>
                    `;
                    // On remplit la div 'infos' qui n'est autre que la variable eventDetailsEl
                    // eventDetailsEl.innerHTML += eventInfo;
                     eventDetailsModalContent.innerHTML += eventInfo;
                  });
                } else {
                  eventDetailsModalContent.innerHTML = '<p>Aucun événement pour cette date.</p>';
                }
                  // Affiche la modal en cliquant sur le lien invisible
                 openModalButton.click();
                },
          eventDisplay : 'block',
          headerToolbar: headerToolbarConfig,
          /* {
            left: 'myCustomButton1 myCustomButton2',
            center: 'title' ,
            right: 'prev,dayGridWeek,dayGridMonth,next'
          },
          */
          events: '/api/reservations',
 
        // Contenu de la cellule 'jour' //
          dayCellContent: function(arg) {
                        let dateText = arg.date.getDate();
                        let dateCopy = new Date(arg.date);
                        dateCopy.setDate(dateCopy.getDate() + 1);
                        let formattedDate = dateCopy.toISOString().split('T')[0];
                        let color = openDates.includes(formattedDate) ? 'green' : 'red';

                        let id = `pastille-${arg.date.getFullYear()}-${arg.date.getMonth() + 1}-${dateText}`;
                        
                        let pastille = `<div id="${id}" class="circle ${color}-circle"></div>`;
                        let dateHtml = `<div class="fc-numerojour">${dateText}</div>`;

                        if (calendar.view.type === 'dayGridMonth') {
                            return { html: pastille + dateHtml };
                        } else if (calendar.view.type === 'dayGridWeek') {
                            return { html: pastille + dateHtml };
                        }
                    },
          // Ajout de boutons //
          customButtons: {
          myCustomButton1: {
            click: function() {
              window.location.href = "{{ path('app_reservation') }}";
            }
          },
          myCustomButton2: {
            click: function() {
              window.location.href = "{{ path('app_piscine') }}";
            }
          }
        },
          // Traduction des boutons //
          buttonText: {
            today: 'aujourd\'hui',
            month: 'mois',
            week: 'semaine',
            day: 'jour',
            list: 'liste'
            },

        // Contenu des événements
        eventContent: function(arg) {
            let containerEl = document.createElement('div')

            let avatarEl = document.createElement('img')
            avatarEl.src = arg.event.extendedProps.icon
            avatarEl.style.width = '30px'
            avatarEl.style.height = '30px'
            avatarEl.style.borderRadius = '50%'
            avatarEl.style.margin = '5px'
            avatarEl.style.border = '1px solid black'
            // avatarEl.style.background = 'white'

            let textEl = document.createElement('span')
            textEl.innerHTML = arg.event.title

            containerEl.appendChild(avatarEl)

            return { domNodes: [avatarEl] }
        },
        });
        calendar.render();
        // Initialisation de la modal animée
        $("#openModalButton").animatedModal();

        // Affiche la modal lorsque le document est prêt
          document.body.classList.add('show-modal');
      });

      // Fermeture du fetch
      });
    </script>

    {# Script de la Modal #}
    <script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>
    <script src="{{ asset('assets/javascript/animatedModal.min.js') }}"></script>
    <script src="{{ asset('assets/javascript/seasonbackground.js') }}"></script>
    <script>$("#demo01").animatedModal();</script>
    {% endblock %}



  

